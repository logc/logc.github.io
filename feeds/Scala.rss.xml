<?xml version="1.0" encoding="utf-8"?> 
<rss version="2.0">
 <channel>
  <title>logc io: Posts tagged 'scala'</title>
  <description>logc io: Posts tagged 'scala'</description>
  <link>http://logc.github.io/tags/scala.html</link>
  <lastBuildDate>Fri, 10 Aug 2018 10:06:41 UT</lastBuildDate>
  <pubDate>Fri, 10 Aug 2018 10:06:41 UT</pubDate>
  <ttl>1800</ttl>
  <item>
   <title>Setting JAVA_HOME for SBT inside Emacs GUI</title>
   <link>http://logc.github.io/blog/2018/08/10/setting-java-home-for-sbt-inside-emacs-gui/?utm_source=scala&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-logc-github-io:-blog-2018-08-10-setting-java-home-for-sbt-inside-emacs-gui</guid>
   <pubDate>Fri, 10 Aug 2018 10:06:41 UT</pubDate>
   <author>logc</author>
   <description>
&lt;p&gt;Is your terminal SBT and your Emacs (or Spacemacs) SBT giving you different results? More confusingly, is SBT doing the correct thing from inside Emacs if Emacs is started from the terminal and not as a GUI application?&lt;/p&gt;

&lt;p&gt;This can be caused by Emacs producing its own environment if started as a GUI application! (And you thought all environments were created equal, out of &lt;code&gt;.bashrc&lt;/code&gt; or whatever &amp;hellip; Nope.)&lt;/p&gt;

&lt;p&gt;This new env that Emacs creates for itself is based on &amp;hellip; magic, I guess.&lt;/p&gt;

&lt;p&gt;In any case, it does &lt;em&gt;not&lt;/em&gt; necessarily respect the &lt;code&gt;JAVA_HOME&lt;/code&gt; that you carefully set in your normal (terminal) environment.&lt;/p&gt;

&lt;p&gt;In order to correct this, add to your &lt;code&gt;init.el&lt;/code&gt; (or &lt;code&gt;dotspacemacs/user-init&lt;/code&gt; in &lt;code&gt;.spacemacs&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(setenv "JAVA_HOME"
        "/Library/Java/JavaVirtualMachines/jdk1.8.0_172.jdk/Contents/Home/")&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or whatever it is that &lt;code&gt;JAVA_HOME&lt;/code&gt; should point to.&lt;/p&gt;

&lt;p&gt;As an alternative, you can set this variable per project by adding a file &lt;code&gt;.sbtopts&lt;/code&gt; in the project root with the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-java-home
/Library/Java/JavaVirtualMachines/jdk1.8.0_172.jdk/Contents/Home/&lt;/code&gt;&lt;/pre&gt;</description></item>
  <item>
   <title>Ensime server crashed by wrong JAR</title>
   <link>http://logc.github.io/blog/2018/08/09/ensime-server-crashed-by-wrong-jar/?utm_source=scala&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-logc-github-io:-blog-2018-08-09-ensime-server-crashed-by-wrong-jar</guid>
   <pubDate>Thu, 09 Aug 2018 12:10:00 UT</pubDate>
   <author>logc</author>
   <description>
&lt;p&gt;If you have a dodgy source jar file, it will probably blow up the ensime server with java.util.zip.ZipException: error in opening zip file. The solution offered in &lt;a href="https://github.com/ensime/ensime-server/issues/825"&gt;the project&amp;rsquo;s Github issue&lt;/a&gt; is to delete your local copy of the bad file and add it to the list of excluded classifiers in ivy (i.e. &lt;code&gt;~/.ivy2/exclude_classifiers&lt;/code&gt;), and report the file to the nexus hosts to have it deleted.&lt;/p&gt;

&lt;p&gt;Mine is a bit longer &amp;hellip;&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;I struggled with this error for weeks! In my case, the offending JAR was a transitive dependency of a project, and the solution offered here was not clear enough for me.&lt;/p&gt;

&lt;p&gt;This problem is tricky if you previously loaded the project into an IDE: they download by default all transitive dependencies with sources and javadoc, and the ivy cache is shared by all projects in the same machine.&lt;/p&gt;

&lt;p&gt;Here is my solution, in case it helps others:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;determine which dependency is pulling the problem JAR with the &lt;a href="https://github.com/jrudolph/sbt-dependency-graph"&gt;sbt dependency  graph plugin&lt;/a&gt; (note: the  command &lt;code&gt;whatDependsOn&lt;/code&gt; only works in interactive mode)&lt;/li&gt;
 &lt;li&gt;move away the current ivy cache folder &lt;code&gt;console
$ mv ~/.ivy2/ ~/.ivy2_old&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;(optional) create a new clone to have a known state &lt;code&gt;console
$ git clone $repo ~/dev/ensime-$repo&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;edit &lt;code&gt;build.sbt&lt;/code&gt; to add an exclusion rule for the transitive dependency at the line of the explicit dependency that needs it, e.g. &lt;code&gt;sbt
libraryDependencies ++= Seq(
  "com.company.notifications" % "notifications-schema" exclude("org.json", "json")
)&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;compile, go for a coffee while ivy downloads the internet :smile:, then run ensime commands &lt;code&gt;console
$ sbt compile
$ sbt ensimeConfig ensimeConfigProject&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</description></item>
  <item>
   <title>Debug Scala with Spacemacs</title>
   <link>http://logc.github.io/blog/2018/05/14/debug-scala-with-spacemacs/?utm_source=scala&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-logc-github-io:-blog-2018-05-14-debug-scala-with-spacemacs</guid>
   <pubDate>Mon, 14 May 2018 14:08:11 UT</pubDate>
   <author>logc</author>
   <description>
&lt;p&gt;The &lt;a href="http://ensime.github.io/editors/emacs/userguide/#debugging"&gt;documentation about debugging in ENSIME&lt;/a&gt; was a bit confusing to me. Here are my notes on how to start debugging an (sbt-based) Scala project from Emacs (Spacemacs):&lt;/p&gt;

&lt;ol&gt;
 &lt;li&gt;
  &lt;p&gt;Launch the debugger from the sbt console first. Use the sbt-mode shell. I  don&amp;rsquo;t really know if this works launching SBT on a terminal not running under  Emacs. Use &lt;code&gt;ensimeTestOnlyDebug&lt;/code&gt; if you are running a test, otherwise use  &lt;code&gt;ensimeRunDebug&lt;/code&gt; for an implementation class.&lt;/p&gt;
  &lt;pre&gt;&lt;code&gt;&amp;gt; ensimeTestOnlyDebug com.company.division.squad.project.package.TestClass
...
Listening for transport dt_socket at address: 5005&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;Set a breakpoint in a source code line by moving your cursor to that line and  using &lt;code&gt;, d b&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;Attach to the debugger by using &lt;code&gt;, d A&lt;/code&gt;. The first time, you will need to  specify Host (&lt;code&gt;localhost&lt;/code&gt;) and Port (the number in the &lt;code&gt;Listening for
   transport ...&lt;/code&gt; line above)&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;When (if) the debugger hits the line where your breakpoint is set, the Emacs  cursor will jump to that position, and you can start using other debugging  commands (&lt;code&gt;, d n&lt;/code&gt;, &lt;code&gt;, d i&lt;/code&gt;, etc &amp;hellip;)&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</description></item>
  <item>
   <title>Ensime server crash because of transitive dependency</title>
   <link>http://logc.github.io/blog/2017/09/05/ensime-server-crash-because-of-transitive-dependency/?utm_source=scala&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-logc-github-io:-blog-2017-09-05-ensime-server-crash-because-of-transitive-dependency</guid>
   <pubDate>Tue, 05 Sep 2017 13:47:32 UT</pubDate>
   <author>logc</author>
   <description>
&lt;p&gt;The Scala layer for Spacemacs uses Ensime by default. There is an error that made me struggle for weeks: &lt;a href="https://github.com/ensime/ensime-server/issues/825"&gt;Bad source jar kills the server: ZipException: error in opening zip file&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The offending JAR was a transitive dependency of a project, and the solution offered on the issue was not clear for me.&lt;/p&gt;

&lt;p&gt;This problem is tricky if you previously loaded the project into an IDE: they download by default all transitive dependencies with sources and javadoc, and the ivy cache is shared by all projects in the same machine.&lt;/p&gt;

&lt;p&gt;Here is my solution, as found also on the issue, in case it helps others:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;determine which dependency is pulling the problem JAR with the &lt;a href="https://github.com/jrudolph/sbt-dependency-graph"&gt;sbt dependency  graph plugin&lt;/a&gt; (note: the  command &lt;code&gt;whatDependsOn&lt;/code&gt; only works in interactive mode)&lt;/li&gt;
 &lt;li&gt;move away the current ivy cache folder &lt;code&gt;console
$ mv ~/.ivy2/ ~/.ivy2_old&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;(optional) create a new clone to have a known state &lt;code&gt;console
$ git clone $repo ~/dev/ensime-$repo&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;edit &lt;code&gt;build.sbt&lt;/code&gt; to add an exclusion rule for the transitive dependency at the  line of the explicit dependency that needs it, e.g. &lt;code&gt;sbt
libraryDependencies ++= Seq(
  "com.company.notifications" % "notifications-schema" exclude("org.json", "json")
)&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;compile, go for a coffee while ivy downloads the internet :), then run ensime commands &lt;code&gt;console
$ sbt compile
$ sbt ensimeConfig ensimeConfigProject&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</description></item></channel></rss>