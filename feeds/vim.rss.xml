<?xml version="1.0" encoding="utf-8"?> 
<rss version="2.0">
 <channel>
  <title>logc io: Posts tagged 'vim'</title>
  <description>logc io: Posts tagged 'vim'</description>
  <link>http://logc.github.io/tags/vim.html</link>
  <lastBuildDate>Sun, 15 Jul 2015 11:05:47 UT</lastBuildDate>
  <pubDate>Sun, 15 Jul 2015 11:05:47 UT</pubDate>
  <ttl>1800</ttl>
  <item>
   <title>Open files from last commit in Vim</title>
   <link>http://logc.github.io/blog/2015/07/15/open-files-from-last-commit-in-vim/?utm_source=vim&amp;utm_medium=RSS</link>
   <guid>urn:http-logc-github-io:-blog-2015-07-15-open-files-from-last-commit-in-vim</guid>
   <pubDate>Sun, 15 Jul 2015 11:05:47 UT</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;It is always a nuisance to remember which files were you working on when you last exited your editing session. I have tried different approaches, including:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;leaving a test that does not succeed in order to get an errortrace that  points to the next task I should tackle&lt;/li&gt;
 &lt;li&gt;opening the editor inside a &lt;code&gt;tmux&lt;/code&gt; or &lt;code&gt;screen&lt;/code&gt; session, and therefore never  ending the editing session&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;The last idea I had was to create a unfinished Git commit (called &amp;ldquo;Unfinished: The commit title&amp;rdquo;), and use Git to retrieve the name of the files that were touched in that commit. You can do it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git log --pretty=format: --name-only -n 1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you alias that command in your &lt;code&gt;.gitconfig&lt;/code&gt;, e.g. to &lt;code&gt;lastedited&lt;/code&gt;, you can then open the files in your editor by command subtitution:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vim $(git lastedited)&lt;/code&gt;&lt;/pre&gt;&lt;/html&gt;</description></item></channel></rss>