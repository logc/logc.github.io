<?xml version="1.0" encoding="utf-8"?> 
<rss version="2.0">
 <channel>
  <title>logc io: Posts tagged 'economy'</title>
  <description>logc io: Posts tagged 'economy'</description>
  <link>http://logc.github.io/tags/economy.html</link>
  <lastBuildDate>Fri, 26 Feb 2016 22:54:28 UT</lastBuildDate>
  <pubDate>Fri, 26 Feb 2016 22:54:28 UT</pubDate>
  <ttl>1800</ttl>
  <item>
   <title>Binaries and customers</title>
   <link>http://logc.github.io/blog/2016/02/26/binaries-and-customers/?utm_source=economy&amp;utm_medium=RSS</link>
   <guid>urn:http-logc-github-io:-blog-2016-02-26-binaries-and-customers</guid>
   <pubDate>Fri, 26 Feb 2016 22:54:28 UT</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;Just this week I realised that the barrier between binaries and source code is the same barrier that there is between a customer and a collaborator.&lt;/p&gt;

&lt;p&gt;A customer is someone who wants to use your product and does not care about its inner workings: he is prepared to give you money in exchange for both things (using your product, and not having to know how it works).&lt;/p&gt;

&lt;p&gt;A collaborator is someone that works with you in creating the very same product that you intend to sell later on. His interests are exactly the opposite as those of the customer: a collaborator does not necessarily need to use the product, and he needs to know as much as possible about your product in order to contribute as much as possible to it. Otherwise, the collaboration will be wasteful.&lt;/p&gt;

&lt;p&gt;Therefore, you should give to your customer a binary (the end-result of your software), and you should give to your collborator a source code representation of your product (a textual representation of the same software).&lt;/p&gt;

&lt;p&gt;I came to realize this while discussing during a technical speech with one of our tech leads. He was promoting the use of a tool that allowed designers to turn specifications into wireframes, and those wireframes into workable code. He expected this tool to avoid that designers and developers communicated &amp;ldquo;via screenshots&amp;rdquo;. I agreed with him, and said that we needed specification owners to work as close to the code as possible, because the ultimate specification of a feature is the source code itself.&lt;/p&gt;

&lt;p&gt;At that point, he disagreed with me, and said that he did not expect designers to &amp;ldquo;actually code&amp;rdquo;. I said anything that was not a textual representation of the result was wasteful, since the receivers of a binary representation would have to reverse engineer how that binary was created. With &amp;ldquo;binary&amp;rdquo; I meant the screenshots, but also other representations like videos, presentations, etc.&lt;/p&gt;

&lt;p&gt;He contended that why should a designer treat you (the lowly coder) as anything different than a customer. And at that point it suddenly dawned on me: because the customer pays.&lt;/p&gt;

&lt;p&gt;The money transaction marks the frontier between one organization and another, and it also marks this curious effect: the customer is &lt;strong&gt;entitled&lt;/strong&gt; to a &lt;strong&gt;less complex&lt;/strong&gt; representation of the product, precisely because the customer/provider relationship is a hallmark of the division of labour, and in plain words it means &amp;ldquo;I have other shit to do, just give me the plain result of your work &amp;amp; don&amp;rsquo;t bother me with details.&amp;rdquo;&lt;/p&gt;&lt;/html&gt;</description></item></channel></rss>