<?xml version="1.0" encoding="utf-8"?> 
<rss version="2.0">
 <channel>
  <title>logc io: Posts tagged 'git'</title>
  <description>logc io: Posts tagged 'git'</description>
  <link>http://logc.github.io/tags/git.html</link>
  <lastBuildDate>Tue, 15 Aug 2017 16:18:11 UT</lastBuildDate>
  <pubDate>Tue, 15 Aug 2017 16:18:11 UT</pubDate>
  <ttl>1800</ttl>
  <item>
   <title>Some Git aliases</title>
   <link>http://logc.github.io/blog/2017/08/15/some-git-aliases?utm_source=git&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-logc-github-io:-blog-2017-08-15-some-git-aliases</guid>
   <pubDate>Tue, 15 Aug 2017 16:18:11 UT</pubDate>
   <author>logc</author>
   <description>
&lt;p&gt;Here are some of the Git alias configurations that I use. My philosophy in writing them was to keep them descriptive, and &lt;em&gt;not to keep them easy to type&lt;/em&gt;, following the approach in &lt;a href="http://blog.wittchen.biz.pl/my-approach-to-git-aliases/"&gt;this blog post&lt;/a&gt;. In order to keep my typing short, I use the &lt;a href="http://fishshell.com"&gt;fish shell&lt;/a&gt;.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;pre&gt;&lt;code&gt;[alias]
	amend = commit --amend
	discard = checkout --
	docommit = commit --verbose --all
	hist = log --color --pretty=format:\"%C(yellow)%h%C(reset) %s%C(bold red)%d%C(reset) %C(green)%ad%C(reset) %C(blue)[%an]%C(reset)\" --relative-date --decorate
	lastedit = log --pretty=format: --name-only -n 1
	logshort = log --oneline -n 10
    lsmodified = diff --name-only head
	mkbranch = checkout -b
	rmbranch = branch -d&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The aliases &lt;code&gt;amend&lt;/code&gt; and &lt;code&gt;discard&lt;/code&gt; are pretty self-explanatory. &lt;code&gt;docommit&lt;/code&gt; reflects my own preferences when finishing a commit: just commit everything that is currently modified and add a diff under the commit message, so that I can review what I actually modified everywhere. &lt;code&gt;hist&lt;/code&gt; is something I don&amp;rsquo;t use very much; I copied it from somewhere and I keep it around to avoid going to a GUI when I need to review history in-depth.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;lastedit&lt;/code&gt; lists which files were edited in the last commit. I find it useful to just open them again in an editor:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vim (git lastedit)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;logshort&lt;/code&gt; is probably the alias I use the most. It just gives me an idea of what was going on in a branch, without defaulting to show me all history since the beginning of time. &lt;code&gt;lsmodified&lt;/code&gt; is a recent addition. It lists all files modified but not commited. It is intended to be used together with other aliases:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git discard (git lsmodified)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;mkbranch&lt;/code&gt; and &lt;code&gt;rmbranch&lt;/code&gt; are also quite useful to me. I tend to see Git sometimes as a file system: sometimes I start to type &lt;code&gt;ls -l&lt;/code&gt; when I actually need &lt;code&gt;git status&lt;/code&gt;. In that mindset, I tend to identify branches with directories, and therefore creating and deleting them as if they were directories makes sense.&lt;/p&gt;</description></item>
  <item>
   <title>Open files from last commit in Vim</title>
   <link>http://logc.github.io/blog/2015/07/15/open-files-from-last-commit-in-vim?utm_source=git&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-logc-github-io:-blog-2015-07-15-open-files-from-last-commit-in-vim</guid>
   <pubDate>Sun, 15 Jul 2015 11:05:47 UT</pubDate>
   <author>logc</author>
   <description>
&lt;p&gt;It is always a nuisance to remember which files were you working on when you last exited your editing session. I have tried different approaches, including:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;leaving a test that does not succeed in order to get an errortrace that  points to the next task I should tackle&lt;/li&gt;
 &lt;li&gt;opening the editor inside a &lt;code&gt;tmux&lt;/code&gt; or &lt;code&gt;screen&lt;/code&gt; session, and therefore never  ending the editing session&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;The last idea I had was to create a unfinished Git commit (called &amp;ldquo;Unfinished: The commit title&amp;rdquo;), and use Git to retrieve the name of the files that were touched in that commit. You can do it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git log --pretty=format: --name-only -n 1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you alias that command in your &lt;code&gt;.gitconfig&lt;/code&gt;, e.g. to &lt;code&gt;lastedited&lt;/code&gt;, you can then open the files in your editor by command subtitution:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vim $(git lastedited)&lt;/code&gt;&lt;/pre&gt;</description></item>
  <item>
   <title>Python egg tagged with Git commit hash</title>
   <link>http://logc.github.io/blog/2014/04/01/python-egg-tagged-with-git-commit-hash?utm_source=git&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-logc-github-io:-blog-2014-04-01-python-egg-tagged-with-git-commit-hash</guid>
   <pubDate>Sun, 01 Apr 2014 15:22:00 UT</pubDate>
   <author>logc</author>
   <description>
&lt;h2 id="svn"&gt;SVN&lt;/h2&gt;

&lt;p&gt;Python&amp;rsquo;s setuptools provide a simple mechanism to tag your built distributions with the SVN revision they belong to, by creating a &lt;code&gt;setup.cfg&lt;/code&gt; file along the normal &lt;code&gt;setup.py&lt;/code&gt;, and there write&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[egg_info]
# Add svn revision to the file name
tag_svn_revision = 1&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="git"&gt;Git&lt;/h2&gt;

&lt;p&gt;How to do the same for Git? Or in general, with other information? (Date tagging is also supported by default).&lt;/p&gt;

&lt;p&gt;Answer: modify directly the &lt;code&gt;options&lt;/code&gt; dictionary in the call to &lt;code&gt;setup&lt;/code&gt;, in &lt;code&gt;setup.py&lt;/code&gt;. There, you can put anything you can compute with Python or system calls. E.g. for git:&lt;/p&gt;

&lt;div class="brush: python"&gt;
 &lt;pre&gt;&lt;code&gt;import shlex
from subprocess import check_output

GIT_HEAD_REV = check_output(shlex.split('git rev-parse --short HEAD')).strip()


setup(
    # ... other keys like project name, version, etc ...
    options = dict(egg_info = dict(tag_build = "dev_" + GIT_HEAD_REV)),
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With that setup, distributions (&lt;code&gt;sdist&lt;/code&gt; or &lt;code&gt;bdist&lt;/code&gt;) would be tagged with the string &amp;ldquo;dev&amp;rdquo; and the git hash of the latest commit:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;pre&gt;&lt;code&gt;$ bin/python setup.py sdist bdist_egg
$ ls dist
pyhello-0.1dev-92ffa06.tar.gz    pyhello-0.1dev_92ffa06-py2.7.egg&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Whenever you want to build a stable release (without any &amp;ldquo;dev&amp;rdquo; tags), just set the key to empty in your &lt;code&gt;setup.cfg&lt;/code&gt;, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[egg_info]
tag_build =&lt;/code&gt;&lt;/pre&gt;</description></item></channel></rss>