<?xml version="1.0" encoding="utf-8"?> 
<rss version="2.0">
 <channel>
  <title>logc io: Posts tagged 'git'</title>
  <description>logc io: Posts tagged 'git'</description>
  <link>http://logc.github.io/tags/git.html</link>
  <lastBuildDate>Sun, 15 Jul 2015 11:05:47 UT</lastBuildDate>
  <pubDate>Sun, 15 Jul 2015 11:05:47 UT</pubDate>
  <ttl>1800</ttl>
  <item>
   <title>Open files from last commit in Vim</title>
   <link>http://logc.github.io/blog/2015/07/15/open-files-from-last-commit-in-vim/?utm_source=git&amp;utm_medium=RSS</link>
   <guid>urn:http-logc-github-io:-blog-2015-07-15-open-files-from-last-commit-in-vim</guid>
   <pubDate>Sun, 15 Jul 2015 11:05:47 UT</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;It is always a nuisance to remember which files were you working on when you last exited your editing session. I have tried different approaches, including:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;leaving a test that does not succeed in order to get an errortrace that  points to the next task I should tackle&lt;/li&gt;
 &lt;li&gt;opening the editor inside a &lt;code&gt;tmux&lt;/code&gt; or &lt;code&gt;screen&lt;/code&gt; session, and therefore never  ending the editing session&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;The last idea I had was to create a unfinished Git commit (called &amp;ldquo;Unfinished: The commit title&amp;rdquo;), and use Git to retrieve the name of the files that were touched in that commit. You can do it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git log --pretty=format: --name-only -n 1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you alias that command in your &lt;code&gt;.gitconfig&lt;/code&gt;, e.g. to &lt;code&gt;lastedited&lt;/code&gt;, you can then open the files in your editor by command subtitution:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vim $(git lastedited)&lt;/code&gt;&lt;/pre&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Python egg tagged with Git commit hash</title>
   <link>http://logc.github.io/blog/2014/04/01/python-egg-tagged-with-git-commit-hash/?utm_source=git&amp;utm_medium=RSS</link>
   <guid>urn:http-logc-github-io:-blog-2014-04-01-python-egg-tagged-with-git-commit-hash</guid>
   <pubDate>Sun, 01 Apr 2014 15:22:00 UT</pubDate>
   <description>&lt;html&gt;
&lt;h2 id="svn"&gt;SVN&lt;/h2&gt;

&lt;p&gt;Python&amp;rsquo;s setuptools provide a simple mechanism to tag your built distributions with the SVN revision they belong to, by creating a &lt;code&gt;setup.cfg&lt;/code&gt; file along the normal &lt;code&gt;setup.py&lt;/code&gt;, and there write&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[egg_info]
# Add svn revision to the file name
tag_svn_revision = 1&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="git"&gt;Git&lt;/h2&gt;

&lt;p&gt;How to do the same for Git? Or in general, with other information? (Date tagging is also supported by default).&lt;/p&gt;

&lt;p&gt;Answer: modify directly the &lt;code&gt;options&lt;/code&gt; dictionary in the call to &lt;code&gt;setup&lt;/code&gt;, in &lt;code&gt;setup.py&lt;/code&gt;. There, you can put anything you can compute with Python or system calls. E.g. for git:&lt;/p&gt;

&lt;div class="brush: python"&gt;
 &lt;div class="source"&gt;
  &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;shlex&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;check_output&lt;/span&gt;

&lt;span class="n"&gt;GIT_HEAD_REV&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;check_output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shlex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git rev-parse --short HEAD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;# ... other keys like project name, version, etc ...&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;egg_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag_build&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"dev_"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;GIT_HEAD_REV&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;p&gt;With that setup, distributions (&lt;code&gt;sdist&lt;/code&gt; or &lt;code&gt;bdist&lt;/code&gt;) would be tagged with the string &amp;ldquo;dev&amp;rdquo; and the git hash of the latest commit:&lt;/p&gt;

&lt;div class="brush: console"&gt;
 &lt;div class="source"&gt;
  &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; bin/python setup.py sdist bdist_egg
&lt;span class="gp"&gt;$&lt;/span&gt; ls dist
&lt;span class="go"&gt;pyhello-0.1dev-92ffa06.tar.gz    pyhello-0.1dev_92ffa06-py2.7.egg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;p&gt;Whenever you want to build a stable release (without any &amp;ldquo;dev&amp;rdquo; tags), just set the key to empty in your &lt;code&gt;setup.cfg&lt;/code&gt;, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[egg_info]
tag_build =&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may find a working example in &lt;a href="https://github.com/logc/pyhello"&gt;this repository&lt;/a&gt;&lt;/p&gt;&lt;/html&gt;</description></item></channel></rss>