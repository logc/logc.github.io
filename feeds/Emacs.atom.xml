<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
 <title type="text">logc io: Posts tagged 'emacs'</title>
 <link rel="self" href="http://logc.github.io/feeds/emacs.atom.xml" />
 <link href="http://logc.github.io/tags/emacs.html" />
 <id>urn:http-logc-github-io:-tags-emacs-html</id>
 <updated>2019-08-23T14:14:14Z</updated>
 <entry>
  <title type="text">Setting up Magit Forge with Github Enterprise server</title>
  <link rel="alternate" href="http://logc.github.io/blog/2019/08/23/setting-up-magit-forge-with-github-enterprise-server/?utm_source=emacs&amp;utm_medium=Atom" />
  <id>urn:http-logc-github-io:-blog-2019-08-23-setting-up-magit-forge-with-github-enterprise-server</id>
  <published>2019-08-23T14:14:14Z</published>
  <updated>2019-08-23T14:14:14Z</updated>
  <author>
   <name>logc</name></author>
  <content type="html">
&lt;p&gt;I have attempted a number of times to create a pull request from the comfort of Emacs and Magit, with no success yet. The main problem is that I use most of the time my company&amp;rsquo;s GitHub Enterprise instance, not the public service called &lt;code&gt;github.com&lt;/code&gt;. The GitHub service is so ubiquitous that many people forget there are other installations, not seen on the public Internet, where big corporations and hip companies keep their precious, precious code.&lt;/p&gt;

&lt;p&gt;This week I finally made progress in setting up the connection.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;You need to customize the variable &lt;code&gt;forge-alist&lt;/code&gt; to include your company&amp;rsquo;s GHE as a new &amp;ldquo;forge&amp;rdquo;. You need to add there a four-element tuple that describes how Magit Forge should talk to this new Github, and also how it should be identified to the user. It is easier to see how the fields are intended if you use a Customize buffer, but in the end, you need to do the equivalent of evaluating this expression:&lt;/p&gt;

&lt;div class="brush: emacs-lisp"&gt;
 &lt;div class="highlight"&gt;
  &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;push&lt;/span&gt; &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ghe.company.net"&lt;/span&gt; &lt;span class="s"&gt;"ghe.company.net/api/v3"&lt;/span&gt;
        &lt;span class="s"&gt;"ghe.company.net"&lt;/span&gt; &lt;span class="nv"&gt;forge-github-repository&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nv"&gt;forge-alist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;p&gt;where it is assumed that your company&amp;rsquo;s sysadmins have deployed the Github service under a DNS name like &lt;code&gt;ghe.company.net&lt;/code&gt;. Of course, this will be different for each deployment, and it could be called &lt;code&gt;veryprivategithub.anotherdomainweown.com&lt;/code&gt;. You need to figure out that bit.&lt;/p&gt;

&lt;p&gt;Another thing that was tricky was that the next thing to do, on a repository that has been cloned from a remote with this name, is to do a &lt;code&gt;forge-pull&lt;/code&gt;. This will try to contact the GHE instance and download data like open issues.&lt;/p&gt;

&lt;p&gt;In order to connect to the forge, Magit Forge needs to know which credentials to use. There is a wizard, for the first &lt;code&gt;forge-pull&lt;/code&gt;, where you just need to give your user and password (!) and it will create the right token for you using the GHE API (and hopefully, immediately forget your credentials!).&lt;/p&gt;

&lt;p&gt;If you have trust issues, or are a hacker that needs to do everything by themselves, you can do the following instead:&lt;/p&gt;

&lt;ol&gt;
 &lt;li&gt;
  &lt;p&gt;Change the order of sources in the variable &lt;code&gt;auth-sources&lt;/code&gt; and set  &lt;code&gt;~/authinfo.gpg&lt;/code&gt; &lt;strong&gt;higher&lt;/strong&gt; than &lt;code&gt;~/authinfo&lt;/code&gt;. This means that the  &lt;strong&gt;encrypted file&lt;/strong&gt; will be used in preference to a &lt;strong&gt;plaintext file&lt;/strong&gt; in  order to store the token that allows Magit to connect to GHE.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;Open &lt;code&gt;~/.authinfo.gpg&lt;/code&gt;. You may need to enter your passphrase for that file.  You may need to &lt;strong&gt;create&lt;/strong&gt; that file in the first place. You may need to  &lt;strong&gt;create a GPG private/public keypair&lt;/strong&gt; in order to encrypt files at all.  Please refer to the GPG documentation for that. Ah! On top of that, when you  try to open &lt;code&gt;~/.authinfo.gpg&lt;/code&gt;, and you are using GUI Emacs version 26, you  may need to &lt;code&gt;(setq epa-pinentry-mode 'loopback)&lt;/code&gt;, otherwise it will &lt;strong&gt;not&lt;/strong&gt;  prompt you to enter your passphrase and just throw a decryption error. Go and  do all of that, I will be waiting here.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;Ready? OK, now create a token on the Github Enterprise API for your user account.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;You should write that token into &lt;code&gt;~/.authinfo.gpg&lt;/code&gt; in this format:&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;# -*- epa-file-encrypt-to: ("youruser@company.net") -*-
machine ghe.company.net/api/v3 login youruser^forge password &amp;lt;and the token that you just generated&amp;gt;&lt;/code&gt;&lt;/pre&gt;</content></entry>
 <entry>
  <title type="text">Ensime server crash because of transitive dependency</title>
  <link rel="alternate" href="http://logc.github.io/blog/2017/09/05/ensime-server-crash-because-of-transitive-dependency/?utm_source=emacs&amp;utm_medium=Atom" />
  <id>urn:http-logc-github-io:-blog-2017-09-05-ensime-server-crash-because-of-transitive-dependency</id>
  <published>2017-09-05T13:47:32Z</published>
  <updated>2017-09-05T13:47:32Z</updated>
  <author>
   <name>logc</name></author>
  <content type="html">
&lt;p&gt;The Scala layer for Spacemacs uses Ensime by default. There is an error that made me struggle for weeks: &lt;a href="https://github.com/ensime/ensime-server/issues/825"&gt;Bad source jar kills the server: ZipException: error in opening zip file&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The offending JAR was a transitive dependency of a project, and the solution offered on the issue was not clear for me.&lt;/p&gt;

&lt;p&gt;This problem is tricky if you previously loaded the project into an IDE: they download by default all transitive dependencies with sources and javadoc, and the ivy cache is shared by all projects in the same machine.&lt;/p&gt;

&lt;p&gt;Here is my solution, as found also on the issue, in case it helps others:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;determine which dependency is pulling the problem JAR with the &lt;a href="https://github.com/jrudolph/sbt-dependency-graph"&gt;sbt dependency  graph plugin&lt;/a&gt; (note: the  command &lt;code&gt;whatDependsOn&lt;/code&gt; only works in interactive mode)&lt;/li&gt;
 &lt;li&gt;move away the current ivy cache folder &lt;code&gt;console
$ mv ~/.ivy2/ ~/.ivy2_old&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;(optional) create a new clone to have a known state &lt;code&gt;console
$ git clone $repo ~/dev/ensime-$repo&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;edit &lt;code&gt;build.sbt&lt;/code&gt; to add an exclusion rule for the transitive dependency at the  line of the explicit dependency that needs it, e.g. &lt;code&gt;sbt
libraryDependencies ++= Seq(
  "com.company.notifications" % "notifications-schema" exclude("org.json", "json")
)&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;compile, go for a coffee while ivy downloads the internet :), then run ensime commands &lt;code&gt;console
$ sbt compile
$ sbt ensimeConfig ensimeConfigProject&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</content></entry></feed>