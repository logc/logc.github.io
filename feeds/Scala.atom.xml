<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
 <title type="text">logc io: Posts tagged 'scala'</title>
 <link rel="self" href="http://logc.github.io/feeds/scala.atom.xml" />
 <link href="http://logc.github.io/tags/scala.html" />
 <id>urn:http-logc-github-io:-tags-scala-html</id>
 <updated>2018-05-14T14:08:11Z</updated>
 <entry>
  <title type="text">Debug Scala with Spacemacs</title>
  <link rel="alternate" href="http://logc.github.io/blog/2018/05/14/debug-scala-with-spacemacs/?utm_source=scala&amp;utm_medium=Atom" />
  <id>urn:http-logc-github-io:-blog-2018-05-14-debug-scala-with-spacemacs</id>
  <published>2018-05-14T14:08:11Z</published>
  <updated>2018-05-14T14:08:11Z</updated>
  <author>
   <name>logc</name></author>
  <content type="html">
&lt;p&gt;The &lt;a href="http://ensime.github.io/editors/emacs/userguide/#debugging"&gt;documentation about debugging in ENSIME&lt;/a&gt; was a bit confusing to me. Here are my notes on how to start debugging an (sbt-based) Scala project from Emacs (Spacemacs):&lt;/p&gt;

&lt;ol&gt;
 &lt;li&gt;
  &lt;p&gt;Launch the debugger from the sbt console first. Use the sbt-mode shell. I  don&amp;rsquo;t really know if this works launching SBT on a terminal not running under  Emacs. Use &lt;code&gt;ensimeTestOnlyDebug&lt;/code&gt; if you are running a test, otherwise use  &lt;code&gt;ensimeRunDebug&lt;/code&gt; for an implementation class.&lt;/p&gt;
  &lt;pre&gt;&lt;code&gt;&amp;gt; ensimeTestOnlyDebug com.company.division.squad.project.package.TestClass
...
Listening for transport dt_socket at address: 5005&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;Set a breakpoint in a source code line by moving your cursor to that line and  using &lt;code&gt;, d b&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;Attach to the debugger by using &lt;code&gt;, d A&lt;/code&gt;. The first time, you will need to  specify Host (&lt;code&gt;localhost&lt;/code&gt;) and Port (the number in the &lt;code&gt;Listening for
   transport ...&lt;/code&gt; line above)&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;When (if) the debugger hits the line where your breakpoint is set, the Emacs  cursor will jump to that position, and you can start using other debugging  commands (&lt;code&gt;, d n&lt;/code&gt;, &lt;code&gt;, d i&lt;/code&gt;, etc &amp;hellip;)&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</content></entry></feed>